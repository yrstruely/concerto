// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import "./libs/shim/expect.js";
import { group } from "k6";
import http from 'k6/http';
import { jUnit, textSummary, html } from 'https://jslib.k6.io/k6-summary/0.0.1/index.js';
import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";
import dotenv from "k6/x/dotenv";


const PROJECT_DIR = '../'
const env = dotenv.parse(open(PROJECT_DIR + ".env.develop.local"));
const data = JSON.parse(open(PROJECT_DIR + "results/data.json"));
console.log(data)


export let options = {
  maxRedirects: 4,
  stages: [
    { target: 5, duration: '30s' },
    { target: 10, duration: '120s' },
    { target: 0, duration: '30s' }
],
  thresholds: {
    // the rate of successful checks should be higher than 90%
    checks: ['rate>0.9'],
  },
};

export function handleSummary(data) {
  console.log('Preparing the end-of-test summary...');

  // Send the results to some remote server or trigger a hook
  //const resp = http.post('https://httpbin.test.k6.io/kerrys-perf-test-results', JSON.stringify(data));
  //if (resp.status != 200) {
  //  console.error('Could not send summary, got status ' + resp.status);
  //}

  return {
    'stdout': textSummary(data, { indent: ' ', enableColors: true }), // Show the text summary to stdout...
    '/concerto/results/performance/junit.xml': jUnit(data), // but also transform it and save it as a JUnit XML...
    '/concerto/results/performance/summary.json': JSON.stringify(data), // and a JSON with all the details...
    '/concerto/results/performance/result.html': htmlReport(data)
    // And any other JS transformation of the data you can think of,
    // you can write your own JS helpers to transform the summary data however you like!
  };
}

const Pre = Symbol.for("pre");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    baseUrl: `${env.HELIOS_TNE_EXP_BASE_URL}${env.HELIOS_TNE_EXP_URL_PATH}`
  },
  environment: {
    env: "dev",
    baseUrl: `${env.HELIOS_TNE_EXP_BASE_URL}${env.HELIOS_TNE_EXP_URL_PATH}`,
    client_id: env.HELIOS_TNE_EXP_CLIENT_ID,
    client_secret: env.HELIOS_TNE_EXP_CLIENT_SECRET,
    personnelNumber: "504390",
    companyCode: 1456,
    documentReference: "ER03227801-PA",
    documentReferenceWBS: "ER03227802-PA",
    glAccount: "6995010",
    costCenter: "20261",
    wbsCode: "048477.001",
    postingDate: "2021-11-09",
    expenseClaimType: "Accrual",
    activeOnly: true,
    lastModifiedSince: "2021-11-03T00:00:00Z",
    limit: 20,
    offset: 0
  }
});

export default function() {
  group("Integration Tests", function() {
    group("Setup", function() {
      postman[Pre].push(() => {
        pm.environment.set("companyCode", 1456);

        var postingDate = new Date();
        postingDate = Date.UTC(
          postingDate.getUTCFullYear(),
          postingDate.getUTCMonth(),
          postingDate.getUTCDate()
        );
        postingDate = formatDate(postingDate);
        postingDate.toString().split("GMT")[0] + " UTC";

        console.log(postingDate);

        pm.environment.set("postingDate", postingDate);

        function formatDate(date) {
          var d = new Date(date),
            month = "" + (d.getMonth() + 1),
            day = "" + d.getDate(),
            year = d.getFullYear();

          if (month.length < 2) month = "0" + month;
          if (day.length < 2) day = "0" + day;

          return [year, month, day].join("-");
        }
      });

      postman[Request]({
        name: "Setup",
        id: "15bcdd8c-604f-47ff-b387-2efce3ef5313",
        method: "GET",
        address: "{{baseUrl}}/ping",
        headers: {
          client_id: "{{client_id}}",
          client_secret: "{{client_secret}}"
        }
      });

      postman[Pre].pop();
    });

    group("Authentication", function() {
      postman[Pre].push(() => {
        pm.environment.set("companyCode", 1456);
      });

      postman[Request]({
        name: "/employees invalid client id returns 401",
        id: "31a76f92-32fc-4dda-8dc3-01fd5be8a38d",
        method: "GET",
        address: "{{baseUrl}}/ping",
        headers: {
          client_id: "INVALID",
          client_secret: "{{client_secret}}",
          "X-Correlation-ID": "{{$guid}}"
        },
        post(response) {
          pm.test("Status code is 401", function() {
            pm.response.to.have.status(401);
          });
        }
      });

      postman[Request]({
        name: "/employees invalid client secret returns 401",
        id: "a5f36c96-5d46-4a78-85cb-7858587b4c64",
        method: "GET",
        address: "{{baseUrl}}/ping",
        headers: {
          client_id: "{{client_id}}",
          client_secret: "INVALID",
          "X-Correlation-ID": "{{$guid}}"
        },
        post(response) {
          pm.test("Status code is 401", function() {
            pm.response.to.have.status(401);
          });
        }
      });

      postman[Request]({
        name: "/employees valid authentication details returns 200",
        id: "ce6e2d7b-af64-45f0-bb81-7b9b4013b3cd",
        method: "GET",
        address: "{{baseUrl}}/ping",
        headers: {
          client_id: "{{client_id}}",
          client_secret: "{{client_secret}}",
          "X-Correlation-ID": "{{$guid}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
        }
      });

      postman[Pre].pop();
    });

    group("ping", function() {
      postman[Pre].push(() => {
        pm.environment.set("companyCode", 1456);
      });

      postman[Request]({
        name: "/ping returns 200",
        id: "c0ee39a0-004f-4878-9c9d-3daae0f323a8",
        method: "GET",
        address: "{{baseUrl}}/ping",
        headers: {
          client_id: "{{client_id}}",
          client_secret: "{{client_secret}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
        }
      });

      postman[Pre].pop();
    });

    group("accounting-document", function() {
      postman[Pre].push(() => {
        pm.environment.set("companyCode", 1456);
      });

      group("cash", function() {
        postman[Pre].push(() => {
          pm.environment.set("expenseClaimType", "Cash");
        });

        postman[Request]({
          name: "/accounting-document valid returns 201",
          id: "19441ba6-f77f-45b9-b0d1-2932b39e9f7a",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          pre() {
            //ER01969894-PE
            var randomInt = getRandomInt(9999999);
            var documentReference = "ER0" + randomInt + "-PE";
            var documentReferenceWBS = "ER0" + (randomInt + 1) + "-PE";

            pm.environment.set("documentReference", documentReference);
            pm.environment.set("documentReferenceWBS", documentReferenceWBS);

            function getRandomInt(max) {
              return Math.floor(Math.random() * max);
            }
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document valid wbsElement returns 201",
          id: "f9f9cceb-87b9-401a-8bcc-2192cd73f1d8",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReferenceWBS}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "wbsCode": "{{wbsCode}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "wbsCode": "{{wbsCode}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should contain field employeeNumber returns 400",
          id: "f85ca6aa-cdf2-484c-9328-5c92c4894ca9",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should contain field employeeName returns 400",
          id: "936e246f-db8d-4a91-b19c-f13b24cfd31e",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should not contain reversalPostingDate returns 400",
          id: "1dc91693-114c-495c-82b1-c3293ccca5d7",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "reversalPostingDate": "{{postingDate}}",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should not contain reversalReason returns 400",
          id: "19fa2506-b9ac-4a6e-97bc-74437936187f",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "reversalReason": "01",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document unknown employee number returns 400",
          id: "dcd3fac5-1291-4167-9ba0-7b9bdcaa9660",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "999999",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document unknown company code returns 400",
          id: "9ea07b25-ea8a-4df0-8930-78258f179546",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "9999",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document/:documentReference/reverse returns 201",
          id: "2e6635e6-d62c-4f0e-95e9-5b548ede73d6",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReference}}/reverse",
          data:
            '{\n    "documentReference": "{{documentReference}}",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "{{companyCode}}",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document/:documentReference/reverse wbsElement returns 201",
          id: "1b0b7d1d-f8bf-4e38-a7ec-084a9e46b77c",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReferenceWBS}}/reverse",
          data:
            '{\n    "documentReference": "{{documentReferenceWBS}}",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "{{companyCode}}",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document/:documentReference/reverse invalid company code returns 400",
          id: "5f3ab022-677c-417c-8212-cd221b96a798",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReference}}/reverse",
          data:
            '{\n    "documentReference": "{{documentReference}}",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "999999",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document/:documentReference/reverse unknown document reference returns 400",
          id: "f9820dfb-4cdd-44e7-a729-b925e103cfc9",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReference}}/reverse",
          data:
            '{\n    "documentReference": "999999",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "{{companyCode}}",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Pre].pop();
      });

      group("card", function() {
        postman[Pre].push(() => {
          pm.environment.set("expenseClaimType", "Card");
        });

        postman[Request]({
          name: "/accounting-document valid returns 201",
          id: "41c22ed6-d5d1-4f16-971c-586989603c18",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          pre() {
            //ER01969894-PE
            var randomInt = getRandomInt(9999999);
            var documentReference = "ER0" + randomInt + "-PC";
            var documentReferenceWBS = "ER0" + (randomInt + 1) + "-PC";

            pm.environment.set("documentReference", documentReference);
            pm.environment.set("documentReferenceWBS", documentReferenceWBS);

            function getRandomInt(max) {
              return Math.floor(Math.random() * max);
            }
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document valid wbsElement returns 201",
          id: "6225b28d-44b9-4f24-b195-5d23833f099b",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReferenceWBS}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "wbsCode": "{{wbsCode}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "wbsCode": "{{wbsCode}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should contain field employeeNumber returns 400",
          id: "3bdf8151-998c-4cfa-84ce-83a4871ee5be",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should contain field employeeName returns 400",
          id: "2fa37cb0-12a4-4e45-adac-372fff9ba0ce",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should not contain reversalPostingDate returns 400",
          id: "9993c728-d1f4-40a2-acee-9ea8512c950a",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "reversalPostingDate": "{{postingDate}}",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should not contain reversalReason returns 400",
          id: "2d1eeea5-2c9d-4348-af3c-cba524e9a79c",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "reversalReason": "01",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document unknown company code returns 400",
          id: "17d047fe-8cc9-440b-92ed-30d8819e48fd",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "9999",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "items": [\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 188.68,\n      "transactionTaxAmount": 11.32,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    },\n    {\n      "costCenter": "{{costCenter}}",\n      "glAccount": "{{glAccount}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 194.17,\n      "transactionTaxAmount": 5.83,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "vendorTransactionText": "abcdefghijklmnopqrstuvwxy"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document/:documentReference/reverse returns 201",
          id: "3f853cbb-b823-4063-b896-8ecb440ff9f1",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReference}}/reverse",
          data:
            '{\n    "documentReference": "{{documentReference}}",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "{{companyCode}}",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document/:documentReference/reverse wbsElement returns 201",
          id: "470f83c9-ebbe-4dee-a285-11da45fa0ea0",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReferenceWBS}}/reverse",
          data:
            '{\n    "documentReference": "{{documentReferenceWBS}}",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "{{companyCode}}",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document/:documentReference/reverse invalid company code returns 400",
          id: "d6f1df7b-c5dd-4f9a-83a5-a41bcb38534c",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReference}}/reverse",
          data:
            '{\n    "documentReference": "{{documentReference}}",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "999999",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document/:documentReference/reverse unknown document reference returns 400",
          id: "36900af8-7b2b-4da3-a3d8-3b046bfcde2f",
          method: "POST",
          address:
            "{{baseUrl}}/accounting-document/{{documentReference}}/reverse",
          data:
            '{\n    "documentReference": "999999",\n    "postingDate": "{{postingDate}}",\n    "companyCode": "{{companyCode}}",\n    "reversalReason": "01"\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Pre].pop();
      });

      group("accruals", function() {
        postman[Pre].push(() => {
          pm.environment.set("expenseClaimType", "Accrual");
        });

        postman[Request]({
          name: "/accounting-document valid returns 201",
          id: "0fba9b66-ca03-4b0f-9091-f233084e77b4",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "reversalPostingDate": "{{postingDate}}",\n  "reversalReason": "05",\n  "items": [\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          pre() {
            //ER01969894-PE
            var randomInt = getRandomInt(9999999);
            var documentReference = "ER0" + randomInt + "-PA";
            var documentReferenceWBS = "ER0" + (randomInt + 1) + "-PA";

            pm.environment.set("documentReference", documentReference);
            pm.environment.set("documentReferenceWBS", documentReferenceWBS);

            function getRandomInt(max) {
              return Math.floor(Math.random() * max);
            }
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document valid wbsElement returns 201",
          id: "67a90b50-3e1f-4a6a-99de-664c03d47944",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReferenceWBS}}",\n  "reversalPostingDate": "{{postingDate}}",\n  "reversalReason": "05",\n  "items": [\n    {\n      "glAccount": "{{glAccount}}",\n      "wbsCode": "{{wbsCode}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "wbsCode": "{{wbsCode}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "wbsCode": "{{wbsCode}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "wbsCode": "{{wbsCode}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 201", function() {
              pm.response.to.have.status(201);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should contain field reversalPostingDate returns 400",
          id: "80845312-388e-4f23-a2fb-71a0e34fbf34",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "reversalReason": "05",\n  "items": [\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should contain field reversalReason returns 400",
          id: "29ab04ef-34d2-466a-813b-30cdfa100ff8",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "reversalPostingDate": "{{postingDate}}",\n  "items": [\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should not contain field employeeNumber returns 400",
          id: "2a604cfc-d0d0-42df-a8ef-c00680191634",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeNumber": "{{personnelNumber}}",\n  "employeeName": "Zhao Yibin",\n  "reversalPostingDate": "{{postingDate}}",\n  "reversalReason": "05",\n  "items": [\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/accounting-document should not contain field employeeName returns 400",
          id: "da9771ca-30ef-4646-995c-d3779475b898",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "{{companyCode}}",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "employeeName": "Zhao Yibin",\n  "reversalPostingDate": "{{postingDate}}",\n  "reversalReason": "05",\n  "items": [\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name: "/accounting-document unknown company code returns 400",
          id: "9938be64-70c8-49cb-aede-c1ffaa8b8876",
          method: "POST",
          address: "{{baseUrl}}/accounting-document",
          data:
            '{\n  "companyCode": "9999",\n  "type": "{{expenseClaimType}}",\n  "documentDate": "2021-03-21",\n  "documentReference": "{{documentReference}}",\n  "reversalPostingDate": "{{postingDate}}",\n  "reversalReason": "05",\n  "items": [\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V5",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    },\n    {\n      "glAccount": "{{glAccount}}",\n      "costCenter": "{{costCenter}}",\n      "transactionAmount": 200,\n      "transactionGrossAmount": 200,\n      "transactionTaxAmount": 0,\n      "transactionCurrencyCode": "CNY",\n      "taxCode": "V6",\n      "lineItemText": "81273019 12月个人报销",\n      "vendorTransactionText": "Accrue this!"\n    }\n  ]\n}',
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Pre].pop();
      });

      postman[Pre].pop();
    });

    group("spend-data", function() {
      postman[Pre].push(() => {
        pm.environment.set("companyCode", 1456);
      });

      postman[Request]({
        name: "/spend-data valid request returns 201",
        id: "4f46ce5d-035e-4569-9329-80fc7ab7091e",
        method: "POST",
        address: "{{baseUrl}}/spend-data",
        data:
          '[\n    {\n        "employeeId": "{{personnelNumber}}",\n        "employeeFirstName": "Sophia",\n        "employeeSurname": "Rao",\n        "companyUnit": "{{companyCode}}",\n        "transactionReference": "{{documentReference}}",\n        "transactionLine": "1",\n        "postingDate": "{{postingDate}}",\n        "transactionDate": "{{postingDate}}",\n        "transactionType": "{{expenseClaimType}}",\n        "billingCurrency": "CNY",\n        "cardHolderDescriptionOrNarrative": "Purchase 广州百佳超级市场",\n        "supplierId": "579339",\n        "supplierName": "广州百佳超级市场",\n        "supplierCity": "溧阳",\n        "supplierState": "江苏",\n        "supplierCountryCode": "CN",\n        "supplierPostal": "213300",\n        "supplierAddress": "No.1000 城北路",\n        "supplierPhoneNumber": "+86 0593-8901666",\n        "merchantCategory": "Grocery Stores and Supermarkets",\n        "merchantCategoryCode": "5411",\n        "lineAmount": "320.20",\n        "lineTax": "0.00",\n        "glAccount": "{{glAccount}}",\n        "costCenterCode": "{{costCenter}}",\n        "wbsElement": "{{wbsCode}}"      \n    },\n    {\n        "employeeId": "{{personnelNumber}}",\n        "employeeFirstName": "Sophia",\n        "employeeSurname": "Rao",\n        "companyUnit": "{{companyCode}}",\n        "transactionReference": "{{documentReference}}",\n        "transactionLine": "2",\n        "postingDate": "{{postingDate}}",\n        "transactionDate": "{{postingDate}}",\n        "transactionType": "{{expenseClaimType}}",\n        "billingCurrency": "CNY",\n        "cardHolderDescriptionOrNarrative": "Purchase 广州百佳超级市场",\n        "supplierId": "579339",\n        "supplierName": "广州百佳超级市场",\n        "supplierCity": "溧阳",\n        "supplierState": "江苏",\n        "supplierCountryCode": "CN",\n        "supplierPostal": "213300",\n        "supplierAddress": "No.1000 城北路",\n        "supplierPhoneNumber": "+86 0593-8901666",\n        "merchantCategory": "Grocery Stores and Supermarkets",\n        "merchantCategoryCode": "5411",\n        "lineAmount": "320.20",\n        "lineTax": "0.00",\n        "glAccount": "{{glAccount}}",\n        "costCenterCode": "{{costCenter}}",\n        "wbsElement": "{{wbsCode}}"      \n    }\n]',
        headers: {
          client_id: "{{client_id}}",
          client_secret: "{{client_secret}}",
          "X-Correlation-ID": "{{$guid}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 201", function() {
            pm.response.to.have.status(201);
          });

          pm.test("Response body should have message as Success", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("Success");
          });
        }
      });

      postman[Request]({
        name: "/spend-data request with invalid postingDate format returns 400",
        id: "64b8bc29-c672-4743-9530-8634a8ec58e2",
        method: "POST",
        address: "{{baseUrl}}/spend-data",
        data:
          '[\n    {\n        "employeeId": "{{personnelNumber}}",\n        "employeeFirstName": "Sophia",\n        "employeeSurname": "Rao",\n        "companyUnit": "{{companyCode}}",\n        "transactionReference": "{{documentReference}}",\n        "transactionLine": "1",\n        "postingDate": "23/09/2021",\n        "transactionDate": "{{postingDate}}",\n        "transactionType": "{{expenseClaimType}}",\n        "billingCurrency": "CNY",\n        "cardHolderDescriptionOrNarrative": "Purchase 广州百佳超级市场",\n        "supplierId": "579339",\n        "supplierName": "广州百佳超级市场",\n        "supplierCity": "溧阳",\n        "supplierState": "江苏",\n        "supplierCountryCode": "CN",\n        "supplierPostal": "213300",\n        "supplierAddress": "No.1000 城北路",\n        "supplierPhoneNumber": "+86 0593-8901666",\n        "merchantCategory": "Grocery Stores and Supermarkets",\n        "merchantCategoryCode": "5411",\n        "lineAmount": "320.20",\n        "lineTax": "0.00",\n        "glAccount": "{{glAccount}}",\n        "costCenterCode": "{{costCenter}}",\n        "wbsElement": "{{wbsCode}}"      \n    },\n    {\n        "employeeId": "{{personnelNumber}}",\n        "employeeFirstName": "Sophia",\n        "employeeSurname": "Rao",\n        "companyUnit": "{{companyCode}}",\n        "transactionReference": "{{documentReference}}",\n        "transactionLine": "2",\n        "postingDate": "{{postingDate}}",\n        "transactionDate": "{{postingDate}}",\n        "transactionType": "{{expenseClaimType}}",\n        "billingCurrency": "CNY",\n        "cardHolderDescriptionOrNarrative": "Purchase 广州百佳超级市场",\n        "supplierId": "579339",\n        "supplierName": "广州百佳超级市场",\n        "supplierCity": "溧阳",\n        "supplierState": "江苏",\n        "supplierCountryCode": "CN",\n        "supplierPostal": "213300",\n        "supplierAddress": "No.1000 城北路",\n        "supplierPhoneNumber": "+86 0593-8901666",\n        "merchantCategory": "Grocery Stores and Supermarkets",\n        "merchantCategoryCode": "5411",\n        "lineAmount": "320.20",\n        "lineTax": "0.00",\n        "glAccount": "{{glAccount}}",\n        "costCenterCode": "{{costCenter}}",\n        "wbsElement": "{{wbsCode}}"      \n    }\n]',
        headers: {
          client_id: "{{client_id}}",
          client_secret: "{{client_secret}}",
          "X-Correlation-ID": "{{$guid}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 400", function() {
            pm.response.to.have.status(400);
          });
        }
      });

      postman[Request]({
        name:
          "/spend-data request with invalid transactionDate format returns 400",
        id: "6e80d8ca-5e59-4177-8670-87ef995874ec",
        method: "POST",
        address: "{{baseUrl}}/spend-data",
        data:
          '[\n    {\n        "employeeId": "{{personnelNumber}}",\n        "employeeFirstName": "Sophia",\n        "employeeSurname": "Rao",\n        "companyUnit": "{{companyCode}}",\n        "transactionReference": "{{documentReference}}",\n        "transactionLine": "1",\n        "postingDate": "{{postingDate}}",\n        "transactionDate": "23/09/2021",\n        "transactionType": "{{expenseClaimType}}",\n        "billingCurrency": "CNY",\n        "cardHolderDescriptionOrNarrative": "Purchase 广州百佳超级市场",\n        "supplierId": "579339",\n        "supplierName": "广州百佳超级市场",\n        "supplierCity": "溧阳",\n        "supplierState": "江苏",\n        "supplierCountryCode": "CN",\n        "supplierPostal": "213300",\n        "supplierAddress": "No.1000 城北路",\n        "supplierPhoneNumber": "+86 0593-8901666",\n        "merchantCategory": "Grocery Stores and Supermarkets",\n        "merchantCategoryCode": "5411",\n        "lineAmount": "320.20",\n        "lineTax": "0.00",\n        "glAccount": "{{glAccount}}",\n        "costCenterCode": "{{costCenter}}",\n        "wbsElement": "{{wbsCode}}"      \n    },\n    {\n        "employeeId": "{{personnelNumber}}",\n        "employeeFirstName": "Sophia",\n        "employeeSurname": "Rao",\n        "companyUnit": "{{companyCode}}",\n        "transactionReference": "{{documentReference}}",\n        "transactionLine": "2",\n        "postingDate": "{{postingDate}}",\n        "transactionDate": "{{postingDate}}",\n        "transactionType": "{{expenseClaimType}}",\n        "billingCurrency": "CNY",\n        "cardHolderDescriptionOrNarrative": "Purchase 广州百佳超级市场",\n        "supplierId": "579339",\n        "supplierName": "广州百佳超级市场",\n        "supplierCity": "溧阳",\n        "supplierState": "江苏",\n        "supplierCountryCode": "CN",\n        "supplierPostal": "213300",\n        "supplierAddress": "No.1000 城北路",\n        "supplierPhoneNumber": "+86 0593-8901666",\n        "merchantCategory": "Grocery Stores and Supermarkets",\n        "merchantCategoryCode": "5411",\n        "lineAmount": "320.20",\n        "lineTax": "0.00",\n        "glAccount": "{{glAccount}}",\n        "costCenterCode": "{{costCenter}}",\n        "wbsElement": "{{wbsCode}}"      \n    }\n]',
        headers: {
          client_id: "{{client_id}}",
          client_secret: "{{client_secret}}",
          "X-Correlation-ID": "{{$guid}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 400", function() {
            pm.response.to.have.status(400);
          });
        }
      });

      postman[Pre].pop();
    });

    group("employees", function() {
      postman[Pre].push(() => {
        pm.environment.set("companyCode", 1456);
      });

      group("activeOnly", function() {
        postman[Pre].push(() => {
          pm.environment.set("activeOnly", true);
        });

        postman[Request]({
          name:
            "/employees valid request with activeOnly=true and no lastModifiedSince returns 200",
          id: "34fea782-c402-4129-bb9d-8bc82e04dc7f",
          method: "GET",
          address:
            "{{baseUrl}}/employees?companyCode=1456&activeOnly=true&limit=500&offset=0",
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          }
        });

        postman[Request]({
          name:
            "/employees request with activeOnly=true and lastModifiedSince returns 400",
          id: "2161bc32-aa50-4355-8f2b-c7fc95eb871d",
          method: "GET",
          address:
            `{{baseUrl}}/employees?companyCode=1456&activeOnly=true&lastModifiedSince=${environment.lastModifiedSince}&limit=${environment.limit}&offset=${environment.offset}`,
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/employees valid (activeOnly=true) request with required parameters only returns 200",
          id: "5722c3b6-0095-460d-8c0d-713deecefa72",
          method: "GET",
          address:
            `{{baseUrl}}/employees?companyCode=1456&activeOnly=true&limit=${environment.limit}`,
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          }
        });

        postman[Request]({
          name:
            "/employees request without required parameter 'companyCode' returns 400",
          id: "ae5389e9-1859-401a-9b45-9283a76e8ab7",
          method: "GET",
          address:
            `{{baseUrl}}/employees?activeOnly=true&limit=${environment.limit}`,
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/employees request without all required parameters returns 400",
          id: "b432fd4f-439a-461a-9bfd-c73a3946acea",
          method: "GET",
          address: "{{baseUrl}}/employees",
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Request]({
          name:
            "/employees offset and limit < total returns employee count = limit",
          id: "10c6b7a0-7b7f-4d35-8fb0-e605586ff28d",
          method: "GET",
          address:
            "{{baseUrl}}/employees?companyCode=1456&activeOnly=true&limit=20&offset=0",
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            var jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test(
              "Where total not reached, the number of employees should be equal to the limit",
              function() {
                var limit = pm.environment.get("limit");
                var employeesCount = Object.keys(jsonData.employees).length;
                pm.expect(employeesCount).to.equal(limit);
              }
            );
          }
        });

        postman[Request]({
          name:
            "/employees offset and limit > total returns employee count = offset + pageSize and pageSize < limit",
          id: "08f899df-e86f-4d6f-80c3-ca2e2547fd37",
          method: "GET",
          address:
            "{{baseUrl}}/employees?companyCode=1456&activeOnly=true&limit=20&offset=480",
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            var jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test(
              "Where total is reached, the number of employees should equal: pageSize",
              function() {
                var offset = parseInt(pm.environment.get("offset"));
                var pageSize = parseInt(jsonData.pageSize);
                var employeesCount = Object.keys(jsonData.employees).length;

                console.log(offset);
                console.log(pageSize);
                console.log(employeesCount);

                pm.expect(employeesCount).to.equal(pageSize);
              }
            );

            pm.test(
              "Where total is reached, the number of employees should be less than limit",
              function() {
                var limit = parseInt(pm.environment.get("limit"));
                var employeesCount = Object.keys(jsonData.employees).length;

                console.log(limit);
                console.log(employeesCount);

                pm.expect(employeesCount).to.be.below(limit);
              }
            );

            pm.test(
              "Returning limit and offset back to their defaults for other tests",
              function() {
                pm.environment.set("limit", 20);
                pm.environment.set("offset", 0);
                pm.expect(true);
              }
            );
          }
        });

        postman[Request]({
          name:
            "/employees only employees whose companyCode matches companyCode in the query parameters should be returned",
          id: "82a159e2-955c-4afc-9271-aedc22196aac",
          method: "GET",
          address:
            "{{baseUrl}}/employees?companyCode=1456&activeOnly=true&limit=1000&offset=400",
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            var jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test(
              "Only employees whose companyCode matches companyCode in the query parameters should be returned",
              function() {
                var pageSize = parseInt(jsonData.pageSize);
                var employees = jsonData.employees;

                console.log(pageSize);
                console.log(employees);

                employees.forEach(employee => {
                  pm.expect(employee.companyCode).to.equal("1456");
                });

                pm.expect(employees.length).to.equal(pageSize);
              }
            );
          }
        });

        postman[Pre].pop();
      });

      group("delta", function() {
        postman[Pre].push(() => {
          pm.environment.set("activeOnly", false);
        });

        postman[Request]({
          name:
            "/employees valid request with activeOnly=false and lastModifiedSince returns 200",
          id: "8fc4ad4f-c278-46dd-9dea-adc3d61ba964",
          method: "GET",
          address:
            `{{baseUrl}}/employees?companyCode=1456&lastModifiedSince=${environment.lastModifiedSince}&limit=${environment.limit}&offset=${environment.offset}`,
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          }
        });

        postman[Request]({
          name:
            "/employees valid (activeOnly=false) request with required parameters only returns 200",
          id: "062cae74-3dfa-491b-9683-bd77406a31b8",
          method: "GET",
          address:
            `{{baseUrl}}/employees?companyCode=1456&lastModifiedSince=${environment.lastModifiedSince}&limit=${environment.limit}`,
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          }
        });

        postman[Request]({
          name:
            "/employees request without required parameter 'companyCode' returns 400",
          id: "143680f6-1d8d-4c46-ae4a-b8cfa9f82ced",
          method: "GET",
          address:
            `{{baseUrl}}/employees?lastModifiedSince=${environment.lastModifiedSince}&limit=${environment.limit}`,
          headers: {
            client_id: "{{client_id}}",
            client_secret: "{{client_secret}}",
            "X-Correlation-ID": "{{$guid}}"
          },
          post(response) {
            pm.test("Status code is 400", function() {
              pm.response.to.have.status(400);
            });
          }
        });

        postman[Pre].pop();
      });

      postman[Pre].pop();
    });
  });
}
